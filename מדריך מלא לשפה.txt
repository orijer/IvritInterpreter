#מדריך מלא לשימוש בשפת התכנות Ivrit
##################################


#בתקייה IvritInterpreterDistributive יש תקייה נוספת בשם בדיקות, ובה שני קבצים.
#בקובץ testCode.ivrit יש קוד שמטרתו לבדוק את כל הפעולות האפשריות בשפת Ivrit.
#אתם מוזמנים להתבונן שם ולהריץ קובץ זה על מנת להבין את השפה יותר לעומק.  
#בקובץ testResult נמצאות תוצאות ההרצה של הקובץ הנ"ל.


#המטרה של השפה היא להיות ברורה אפילו לאנשים בלי רקע בתכנות.
#אולי תופתעו לראות כמה תכנות בשפה זו דומה למשפטים אמיתיים בעברית.


#שורות שמתחילות בסימן '#' הן הערות בשבילנו, בזמן ההרצה מתעלמים מהן לגמרי.
#אני אשתמש בהן פה כדי להסביר מה הקוד עושה, בלי להשפיע על התנהגות הקוד.


#######
#הדפסה #
#######

#כדי להדפיס משהו למסך משתמשים במילה השמורה הדפס.

#כך למשל אפשר להדפיס מספר שלם:
הדפס 7
הדפס 123456789

#אפשר גם להדפיס חישוב, אך חייבים להשתמש בסוגריים:
הדפס (4 / (2 * (4 - (1 + 5))))
#זה ידפיס 1.

#ניתן גם להדפיס מספר עשרוני באופן דומה:
הדפס 0.5
הדפס 14.74206

#אפשר להדפיס גם משפטים, בעזרת מרכאות באופן הבא:
הדפס "מה שבתוך המרכאות מודפס למסך"
הדפס "צריך לשים לב שהמרכאות אכן נפתחות ונסגרות במקום הרצוי"


#######
#משתנים#
#######

#ייתכן ובמהלך התכנית נרצה לשמור לעצמנו מידע, ואולי לשנות אותו במשך התכנית.
#לשם כך אנו יכולים להגדיר משתנים. יש לנו 4 סוגים שונים של משתנים: שלם, עשרוני, משפט וטענה.
#לכל משתנה יש שם, סוג אחד ויחיד מתוך ארבעת הסוגים הנ"ל, וערך. 
#הערך חייב להתאים לסוג המשתנה או שהתוכנית תקרוס.

#בשביל להגדיר משתנה חדש, נכתוב: משתנה (הסוג שאנחנו רוצים) (שם המשתנה) = (ערך מתאים כלשהו) 
#כך למשל מגדירים משתנה מסוג שלם בשם המשתנה_הראשון_שלי עם הערך 5:
משתנה שלם המשתנה_הראשון_שלי = 5

#כך מגדירים משתנה עשרוני:
משתנה עשרוני משתנה_עשרוני = 0.12345

#כך מגדירים משתנה משפט (משתנה השומר רצף כלשהו של אותיות, לא בהכרח משפט הגיוני ואמיתי)
משתנה משפט המשפט_שלי = "אני יכול לשמור פה טקסט"
משתנה משפט גיבריש = "אפילו דברים לא הגיוניים כמו: ךקדג9645לחה"

#כך מגדירים משתנה טענה (כל טענה יכולה להיות או אמת או שקר, אין אפשרות אחרת)
משתנה טענה טענת_אמת = אמת
משתנה טענה טענת_שקר = שקר

#ניתן להגדיר גם טענות מורכבות יותר כמו (חשוב לשים סוגריים!!!):
משתנה טענה טענה_מורכבת = (8 > 5) 
#במקרה זה, 8 אכן גדול מ 5 ולכן הערך המתקבל הוא אמת.

#שימו לב שביצירת משתנה, הערך חייב להתאים לסוג המשתנה.
#אם היינו כותבים את השורה: משתנה שלם משת = "מילה", היינו מקבלים שגיאה, שכן משתנה שלם לא יכול לקבל ערך של משפט.


#לשמור מידע זה נחמד, אך זה לא היה עוזר אם לא היינו יכולים לעשות איתו כלום.

#נתחיל בלהדפיס את הערך שבתוך המשתנים שיצרנו באופן הבא: הדפס (שם המשתנה), ידפיס את הערך שיש במשתנה הזה.
#שימו לב שאם אין משתנה כזה, התכנית תקרוס.

הדפס המשתנה_הראשון_שלי
#שורה זו תדפיס למסך את הערך שיש במשתנה: המשתנה_הראשון_שלי, כלומר את המספר 5

הדפס המשפט_שלי
#שורה זו תדפיס "אני יכול לשמור פה טקסט"

#בדיוק באותו אופן אפשר להדפיס גם את שאר המשתנים.


#כפי שאולי ניתן להבין משמם, משתנים יכולים לשנות את הערך שלהם.
#בשביל לשנות את הערך של משתנה נכתוב: (שם המשתנה) = (ערך חדש)

המשתנה_הראשון_שלי = 7
הדפס המשתנה_הראשון_שלי
#שינינו את הערך של המשתנה: המשתנה_הראשון_שלי, להיות 7, ולכן יודפס למסך 7.

#באותו אופן נוכל לשנות את שאר המשתנים.

#שימו לב שגם בשינוי ערך משתנה, הערך החדש חייב להתאים לסוג המשתנה.
#אם היינו כותבים את השורה: המשתנה_הראשון_שלי = "מילה", היינו מקבלים שגיאה, שכן משתנה שלם לא יכול לקבל ערך של משפט.


#####
#קלט #
#####

#ניתן גם לבקש מהמשתמש להחליט על ערך של משתנה קיים. רצוי להודיע למשתמש שמחכים ממנו לקלט לפני כן. 
#(רק אחרי שיצרנו את המשתנה עם ערך כלשהו ניתן לקלוט אליו מהמשתמש)

הדפס "משתמש יקר, כתוב מספר שלם"
קלוט-ל המשתנה_הראשון_שלי

#אני מציין שוב, המשתנה שקולטים אליו חייב להיות קיים כבר, לא ניתן ליצור משתנה באותה השורה של: קלוט-ל.


##############
#פעולות על משתנים#
##############

#ניתן להפעיל פעולות שונות על המשתנים, בהתאם לסוגם:

#פעולות על משתנים שלמים ועשרוניים: (מחייבות סוגריים מתאימים)
משתנה שלם מ_שלם1 = 20
משתנה שלם מ_שלם2 = 5

הדפס (מ_שלם1 + מ_שלם2)
#יודפס 25

הדפס (מ_שלם2 - מ_שלם1)
#יודפס 15

הדפס (מ_שלם1 * מ_שלם2)
#יודפס 100

הדפס (מ_שלם2 / מ_שלם1)
#יודפס 4

#שימו לב שבחילוק שלמים מעגלים את התוצאה למטה, ולכן 3 = 3 / 10,    0 = 2 / 3.
#חילוק עשרוניים עובד באותו אופן מלבד חילוק שאכן מחזיר תוצאה עשרונית (1.5 = 2.0 / 3.0)

#פעולות על משתני משפט:
#בין משפטים ניתן אך ורק לחבר, והתוצאה היא צירוף שני המשפטים למשפט ארוך יותר, כך:
משתנה משפט מ_משפט1 = "זה חלק ראשון "
משתנה משפט מ_משפט2 = "זה חלק שני"

הדפס מ_משפט1 + מ_משפט2
#(בניגוד לשלמים ועשרוניים, אסור לשים פה סוגריים!) יודפס "זה חלק ראשון וזה חלק שני"

#שימו לב שניתן לחבר משפט גם לשלם, עשרוני או טענה באותו אופן:
הדפס מ_משפט1 + 5
#יודפס "זה חלק ראשון 5"
הדפס מ_משפט1 + מ_שלם1
#יודפס "זה חלק ראשון 20"

#ובאופן דומה עבור חיבור עם עשרוני ועם טענה.

#פעולות על משתני טענה (כולן דורשות סוגריים, בדומה לשלמים ועשרוניים):
משתנה טענה מ_טענה1 = אמת
משתנה טענה מ_טענה2 = שקר

#וגם: ((משתנה טענה ראשון) וגם (משתנה טענה שני)) 
#תוצאתו היא אמת אם שני המשתנים שלצד וגם הם אמת, ואחרת יוחזר שקר.

הדפס (מ_טענה1 וגם מ_טענה2)
#ידפיס שקר: שכן מ_טענה1 הוא אמת, אך מ_טענה2 הוא שקר, כלומר לא שני המשתנים לצד 'וגם' הם אמת.


#או: ((משתנה טענה ראשון) או (משתנה טענה שני)), 
#ותוצאתו היא אמת אם לפחות אחד מבין שני המשתנים שלצד 'או' הם אמת, ואחרת יוחזר שקר.
#אפילו אם שניהם אמת, התוצאה תהיה אמת.

הדפס (מ_טענה1 או מ_טענה2)
#ידפיס אמת: שכן מ_טענה1 הוא אמת, מ_טענה2 הוא שקר, כלומר אכן לפחות אחד מהם אמת.


#שווה: יותר קל לראות אותו בתוך דוגמא (תזכורת, הערך של מ_שלם1 הוא 20, ושל מ_שלם2 הוא 5):

הדפס (1 שווה 5)
#יודפס שקר, כי 1 כמובן לא שווה 5

הדפס (מ_שלם1 שווה 10)
#יודפס שקר, כי הערך של מ_שלם1 הוא 20 ולא 10.

הדפס (מ_שלם1 שווה 20)
#יודפס אמת, כי הערך של מ_שלם1 הוא אכן 20

הדפס (מ_שלם1 שווה מ_שלם2)
#יודפס שקר, כי הערך של מ_שלם1 הוא 20, הערך של מ_שלם2 הוא 5, וכמובן 20 לא שווה 5.

#ניתן להפעיל שווה גם על עשרוניים, משפטים וטענות באותו אופן.

#לא-שווה: פועל באופן הפוך בדיוק מפעולת שווה (התוצאה היא אמת אם הצדדים לא שווים, ושקר אם הם כן שווים)


#################
#פעולות השמה מורכבות #
#################

#ישנה דרך נוספת לשנות ערך של משתנים.

#עבור שלמים ועשרוניים:

משתנה שלם מ_שלם3 = 10
הדפס מ_שלם3
#יודפס כמובן 10

#חיבור:

מ_שלם3 += 5
#זה שקול לשורה: מ_שלם3 = 5 + מ_שלם3, ולכן עכשיו יודפס 15:
הדפס מ_שלם3

#חיסור:

מ_שלם3 -= 5
#זה שקול לשורה: מ_שלם3 = 5 - מ_שלם3, ולכן עכשיו יודפס 10:
הדפס מ_שלם3

#כפל:

מ_שלם3 *= 2
#זה שקול לשורה: מ_שלם3 = 2 * מ_שלם3, ולכן עכשיו יודפס 20:
הדפס מ_שלם3

#חילוק:

מ_שלם3 /= 4
#זה שקול לשורה: מ_שלם3 = 4 / מ_שלם3, ולכן עכשיו יודפס 5:
הדפס מ_שלם3


#עבור משפטים:

משתנה משפט מ_משפט3 = "משפט ניסיון "
הדפס מ_משפט3
#כמובן ידפיס "משפט ניסיון "

#יש רק פעולת חיבור:

מ_משפט3 += "תוספת"
#זה שקול לשורה: מ_משפט3 = מ_משפט3 + "תוספת", ולכן עכשיו יודפס "משפט ניסיון תוספת"
הדפס מ_משפט3


############
#מחיקת משתנים #
############

#כמו שאולי שמתם לב, יש לנו הרבה משתנים בתכנית, והם לא נמחקים אוטומטית, למרות שאין לנו שימוש בהם יותר.
#זה יכול להוביל לכמה בעיות:
# 1) נצטרך להיות יותר ויותר מקוריים עם שמות המשתנים שלנו, ואף אחד לא רוצה להשתמש במשתנה בשם מ_שלם357....
# 2) בסופו של דבר המחשב יכול לזכור מספר מוגבל של דברים במקביל... 
#    אם ניצור מלא מלא משתנים (מאות אלפי משתנים), יגמר למחשב הזכרון והתכנית תקרוס (או תעבוד מאוד לאט).

#לשם כך, נרצה למחוק את משתנים ברגע שלא נצטרך אותם יותר. עושים זאת כך: מחק (שם המשתנה)
מחק מ_משפט1
מחק מ_משפט2
מחק מ_משפט3

#עכשיו אנו יכולים להגדיר משתנה חדש בשם מ_משפט1.
#שימו לב שניסיון מחיקה של משתנה שלא קיים תקריס את התכנית.

#בנוסף, אי אפשר להשתמש יותר במשתנה אחרי שמחקנו אותו.
#אז השורה הדפס מ_משפט1, תקריס את התכנית, שכן מ_משפט1 כבר לא קיים יותר.


####
#אם#
####

#היינו רוצים לבצע שורות מסויימות בהתאם למצב כלשהו. בשביל זה אנו נשתמש ב 'אם'.
#גם 'אם' קל יותר לראות בדוגמא:

משתנה שלם מ_שלם4 = 8
אם (מ_שלם4 > 5) אז @הצלחה, אחרת @כשלון, בסוף @סוף
@הצלחה
הדפס "ניכנס לקטע הקוד הזה רק אם מ_שלם4 אכן גדול מ 5"
הדפס "נבצע את כל השורות עד שנגיע ל @כשלון (או מה שכתוב אחרי 'אחרת')."
@כשלון
הדפס "ניכנס לקטע הקוד הזה רק אם מ_שלם4 לא גדול מ 5"
הדפס "נבצע את כל השורות עד שנגיע ל @סוף (או מה שכתוב אחרי 'בסוף')."
@סוף
הדפס "פה אנחנו יצאו מקטע ה 'אם', ולכן נדפיס בכל מקרה."

#במקרה שלנו יודפסו השורות:
#"ניכנס לקטע הקוד הזה רק אם מ_שלם4 אכן גדול מ 5"
#"נבצע את כל השורות עד שנגיע ל @כשלון (או מה שכתוב אחרי 'אחרת')."
#"פה אנחנו יצאו מקטע ה 'אם', ולכן נדפיס בכל מקרה."


#שימו לב שסימן '@' הוא הכרחי, אך המילה שישר אחריו היא לבחירתנו.
#היינו יכולים לשנות את @הצלחה ל @מהשאנירוצה, (כל עוד אין רווח, @מה שאני רוצה לא תקין פה).
#צריך לזכור לשנות זאת גם במשפט שכתוב בו 'אם', וגם בקטע שאחריו.

#ניתן כמובן לעשות שורת 'אם' בתוך קטע הצלחה או כשלון, אך צריך להיזהר עם השמות שנותנים אחרי @.
#שימוש באותו שם פעמיים יתן תוצאות לא רצויות.


#######
#קפוץ-ל  #
#######

#בואו נבין יותר לעומק את משמעות הסימן @:
#סימן '@' מציין נקודה בקוד שאנחנו יכולים לקפוץ אליה משורות קוד אחרות, בעזרת המילה השמורה 'קפוץ-ל'.

#קטע הקוד הבא קולט מהמשתמש מספר עשרוני, ומבקש מהמשתמש קלט נוסף כל עוד המספר שהוכנס לא קטן מ 10.
#אנו משתמשים בקפיצה בשביל לבקש מהמשתמש קלט נוסף, ולא להמשיך עד שלא מקבלים קלט תקין (במקרה שלנו, קטן מעשר)

משתנה עשרוני דוגמא_קפוץ = 0.0
@נסה_שוב
הדפס "הכנס מספר עשרוני שקטן מ 10:"
קלוט-ל דוגמא_קפוץ
אם (דוגמא_קפוץ < 10.0) אז @הצלחה_דוגמא_קפוץ, אחרת @כשלון_דוגמא_קפוץ, בסוף @סוף_דוגמא_קפוץ
@הצלחה_דוגמא_קפוץ
הדפס "המשתמש נתן מספר עשרוני שקטן מ 10"
@כשלון_דוגמא_קפוץ
הדפס "ביקשתי קטן מ 10... נסה שוב!"
קפוץ-ל נסה_שוב
@סוף_דוגמא_קפוץ

#####
#צא #
####

#ייתכן (אך לא חובה) שנרצה לצאת מהתוכנית באמצע הקוד, בהתאם לקלט מהמשתמש למשל.

#בשביל לעשות זאת עלינו לכתוב את המילה השמורה 'צא' (לבד, בשורה משלה).

#ניתן לראות לאחר שכל תכנית מסתיימת האם יצאנו בגלל שסיימנו לקרוא את כל הקוד, או בגלל שקראנו 'צא':

#אם סיימנו לקרוא את כל הקוד נקבל: פירוש הקובץ הסתיים לאחר שנקרא כל הקובץ (לא עברנו דרך 'צא')
#אם סיימנו בגלל נקרא 'צא' נקבל: פירוש הקובץ הסתיים לאחר שעברנו דרך המילה 'צא'